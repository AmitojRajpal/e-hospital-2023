<style>
  .highlight {
    background-color: rgb(255, 254, 254);
  }

  table {
    width: 800px;
    border-collapse: collapse;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  tr {
    /* background-color: beige; */
    color: black;
    background-color: linear-gradient(170deg, #ffffff, #b8a878);
    padding: 15px;
    padding-bottom: 20px;
  }

  td {
    padding: 15px;
    width: auto;
  }
  /* th,
  td {
    padding: 15px;
    background: linear-gradient(170deg, #ffffff, #b8a878);
  } */

  th,
  .resultsTable tbody td {
    color: #777;
    font-weight: 400;
    padding-bottom: 20px;
    padding-top: 20px;
    font-weight: 300;
    border: none;
    -webkit-transition: 0.3s all ease;
    -o-transition: 0.3s all ease;
    transition: 0.3s all ease;
  }

  tr:hover {
    background-color: rgb(65, 51, 46);
    color: rgb(255, 255, 255);
  }

  .text-address {
    background-color: beige;
    border-bottom: #777;
  }
</style>

<script>
  // Import all requirements.
  require([
    "esri/config",
    "esri/Map",
    "esri/views/MapView",
    "esri/rest/locator",
    "esri/Graphic",
    "esri/widgets/Locate",
    "esri/Graphic",
    "esri/rest/route",
    "esri/layers/GraphicsLayer",
    "esri/rest/support/RouteParameters",
    "esri/rest/support/FeatureSet",
  ], function (
    esriConfig,
    Map,
    MapView,
    locator,
    Graphic,
    Locate,
    RouteParameters,
    FeatureSet,
    route,
    GraphicsLayer
  ) {
    esriConfig.apiKey =
      "AAPK8d6f97bba6114008aa8c2e0c4e4c9faeVdLpPkFkUE3cdT4JuduDTF2qyVad1BN3dd-RXNWi44KwDM-SeN4GldsP8QiTHPeX";

    const searchField = document.getElementById("locationInput");
    const searchButton = document.getElementById("locationButton");
    var Map_center = [-75.71859624820526, 45.40775749047658];
  
    const routeLayer = new GraphicsLayer();

    const map = new Map({
      basemap: "arcgis-navigation",
      // layers: [routeLayer], // Add the route layer to the map
    });

    var view = new MapView({
      container: "viewDiv",
      map: map,
      center: Map_center,
      zoom: 13,
    });

    searchButton.addEventListener("click", function (){
      console.log("click");
      if (searchField.value != "") {
        const coordinates = searchField.value.split(',').map(Number);
        console.log(coordinates);
        view.center = coordinates;
      }
    });

    const locate = new Locate({
      view: view,
      useHeadingEnabled: false,
      goToOverride: function (view, options) {
        options.target.scale = 1500;
        return view.goTo(options.target);
      },
    });
    view.ui.add(locate, "top-left");

    const places = ["Choose a place type...", "Hospital", "Pharmacy"];

    const select = document.createElement("select", "");
    select.setAttribute("class", "esri-widget esri-select");
    select.setAttribute(
      "style",
      "width: 175px; font-family: 'Avenir Next W00'; font-size: 1em"
    );

    places.forEach(function (p) {
      const option = document.createElement("option");
      option.value = p;
      option.innerHTML = p;
      select.appendChild(option);
    });

    view.ui.add(select, "top-right");

    const locatorUrl =
      "http://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer";
    const routeUrl =
      "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World";

    // Find places and add them to the map
    const table = document.getElementById("resultsTable");

    function findPlaces(category, pt) {
      locator
        .addressToLocations(locatorUrl, {
          location: pt,
          categories: [category],
          maxLocations: 25,
          outFields: ["Place_addr", "PlaceName"],
        })

        .then(function (results) {
          view.popup.close();
          view.graphics.removeAll();

          results.forEach(function (result) {
            view.graphics.add(
              new Graphic({
                attributes: result.attributes, // Data attributes returned
                geometry: result.location, // Point returned
                symbol: {
                  type: "simple-marker",
                  color: "red",
                  size: "12px",
                  outline: {
                    color: "black",
                    width: "2px",
                  },
                },

                popupTemplate: {
                  title: "{PlaceName}", // Data attribute names
                  content: "{Place_addr}",
                },
              })
            );
            const row = document.createElement("tr");
            const cell1 = document.createElement("td");

            const name = document.createElement("span");
            name.innerHTML = result.attributes.PlaceName;
            name.style.fontSize = "1em";

            const addr = document.createElement("span");
            addr.style.fontSize = "0.7em";
            addr.innerHTML = `\n${result.attributes.Place_addr}`;

            cell1.appendChild(name);
            cell1.appendChild(document.createElement("br"));
            cell1.appendChild(addr);

            row.appendChild(cell1);
            table.getElementsByTagName("tbody")[0].appendChild(row);

            row.addEventListener("click", function (event) {
              console.log(
                `Call ${result.attributes.PlaceName} and ${result.attributes.Place_addr}`
              );
            });
            // const place_name = document.createTextNode(result.attributes.PlaceName);
            // const place_addr = document.createTextNode(result.attributes.place_addr);
          });
        });
    }

    table.addEventListener("mouseenter", function (event) {
      if (event.target.tagName === "TD") {
        event.target.parentNode.classList.add("highlight");
      }
    });

    table.addEventListener("mouseleave", function (event) {
      if (event.target.tagName === "TD") {
        event.target.parentNode.classList.remove("highlight");
      }
    });

    // function addGraphic(type, point) {
    //   const graphic = new Graphic({
    //     symbol: {
    //       type: "simple-marker",
    //       color: type === "origin" ? "white" : "black",
    //       size: "8px",
    //     },
    //     geometry: point,
    //   });
    //   view.graphics.add(graphic);
    // }

    // const stopSymbol = {
    //   type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
    //   style: "cross",
    //   size: 15,
    //   outline: {
    //     // autocasts as new SimpleLineSymbol()
    //     width: 4,
    //   },
    // };

    // Search for places in center of map
    view.watch("stationary", function (val) {
      if (val) {
        findPlaces(select.value, view.center);
      }
    });

    // Listen for category changes and find places
    select.addEventListener("change", function (event) {
      for (let i = table.rows.length - 1; i > 0; i--) {
        table.deleteRow(i);
      }
      findPlaces(event.target.value, view.center);
    });

    // view.on("click", function(event){

    // if (view.graphics.length === 0) {
    //   addGraphic("origin", event.mapPoint);
    // } else if (view.graphics.length === 1) {
    //   addGraphic("destination", event.mapPoint);

    //   getRoute(); // Call the route service

    // } else {
    //   view.graphics.removeAll();
    //   addGraphic("origin",event.mapPoint);
    // }

    // });

    function addGraphic(type, point) {
      const graphic = new Graphic({
        symbol: {
          type: "simple-marker",
          color: type === "origin" ? "white" : "black",
          size: "8px",
        },
        geometry: point,
      });
      view.graphics.add(graphic);
    }

    function getRoute() {
      const routeParams = new RouteParameters({
        stops: new FeatureSet({
          features: view.graphics.toArray(),
        }),

        returnDirections: true,
      });

      route
        .solve(routeUrl, routeParams)
        .then(function (data) {
          data.routeResults.forEach(function (result) {
            result.route.symbol = {
              type: "simple-line",
              color: [5, 150, 255],
              width: 3,
            };
            view.graphics.add(result.route);
          });

          // Display directions
          if (data.routeResults.length > 0) {
            const directions = document.createElement("ol");
            directions.classList =
              "esri-widget esri-widget--panel esri-directions__scroller";
            directions.style.marginTop = "0";
            directions.style.padding = "15px 15px 15px 30px";
            const features = data.routeResults[0].directions.features;

            // Show each direction
            features.forEach(function (result, i) {
              const direction = document.createElement("li");
              direction.innerHTML =
                result.attributes.text +
                " (" +
                result.attributes.length.toFixed(2) +
                " miles)";
              directions.appendChild(direction);
            });

            view.ui.empty("top-right");
            view.ui.add(directions, "top-right");
          }
        })

        .catch(function (error) {
          console.log(error);
        });
    }
  });
</script>
